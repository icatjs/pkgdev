#!/usr/bin/env node

var path = require('path'), fs = require('fs'),
	program = require('commander'),
	gulp = require('gulp'), pkg = require('../package.json'),
	copy = require('../lib/copy');

program.version(pkg.version).usage('[options] [dir]').parse(process.argv);

var prompt = require('prompt'),
	json2str = require('json-stringify-safe'),
	base_path = path.resolve('.'),
	destination_path = program.args.shift() || '.',
	appname = path.basename(path.resolve(destination_path)),
	curfolder = path.basename(base_path),
	o = {};

prompt.message = '[?]'.yellow;
prompt.delimiter = ':';
prompt.colors = false;
prompt.start();

var questions = [
	{
		name: 'name',
		validator: /\w+/,
		warning: 'Must input',
		default: appname
	}, {
		name: 'version',
		default: '0.0.1'
	}, {
		name: 'description'
	}, {
		name: 'main',
		message: 'entry point'
	}, {
		name: 'tpl',
		message: 'template-file-name',
		default: 'src/widget.tpl'
	}, {
		name: 'style',
		message: 'css-file-name',
		default: 'src/widget.css'
	}, {
		name: 'cssfile',
		message: 'css-concat-queue'
	}, {
		name: 'jsfile',
		message: 'js-concat-queue'/*,
		default: 'src/js/intro.js, src/js/model.js, src/js/view.js, src/js/outro.js'*/
	}, {
		name: 'scripts',
		message: 'test command'
	}, {
		name: 'repository',
		message: 'git repository'
	}, {
		name: 'keywords'
	}, {
		name: 'author'
	}, {
		name: 'license',
		default: 'MIT'
	}
];

console.log('Press ^C at any time to quit.');
prompt.get(questions, function(err, result){
	if(err) return;
	questions.forEach(function(item){
		var k = item.name, v = result[k];
		if(k==='scripts'){
			o[k] = result[k] = {
				test: v? v : 'echo \"Error: no test specified\" && exit 1'
			};
		}
		else if(k==='jsfile' || k==='cssfile'){
			o[k] = v? (result[k] = v.split(/\s+/)) : '';
		}
		else if(v){
			o[k] = k==='keywords'? (result[k] = v.split(/\s+/)) :
				k==='repository'? (result[k] = {type:'git', url:v}) : v;
		}
	});
	console.log('About to write to path/package.json:\n');
	console.log('\n'+json2str(o, null, 2)+'\n\n');

	prompt.message = '';
	prompt.delimiter = '';
	prompt.get({name:'ok', message:'Is this ok?', validator:/y[es]*|n[o]?/, default:'yes'}, function(e, ret){
		if(e || /^n[o]?$/i.test(ret.ok)){
			console.log('Aborted.');
		} else {
			result.devDependencies = {
				"gulp": "^3.9.0",
				"gulp-watch": "^4.2.4",
				"gulp-uglify": "^1.2.0",
				"gulp-rename": "^1.2.2",
				"gulp-load-plugins": "^1.0.0-rc.1",
				"gulp-sass": "^2.0.1",
				"gulp-cssmin": "^0.1.7",
				"browser-sync": "^2.7.7",
				"gulp-clean": "^0.3.1",
				"gulp-concat": "^2.5.2",
				"gulp-notify": "^2.2.0",
				"gulp-copy": "0.0.2"
			};

			result.jsfile = result.jsfile || [
				"src/js/intro.js", "src/js/model.js",
				"src/js/view.js", "src/js/outro.js"
			];

			var content = json2str(result, null, 2),
				len = __dirname.split(/\\|\//).length + (base_path.charAt(0)==='/'? base_path.split(/\\|\//).length-2 : 0),
				isRoot = result.name===curfolder,
				curpath = isRoot? '.' : result.name;
			if(!fs.existsSync(result.name) && !isRoot){
				fs.mkdir(result.name);
			}
			gulp.src([__dirname+'/../_template/**/*']).pipe(copy(curpath+'/', {prefix:len}));
			fs.writeFile(curpath+'/package.json', content);
		}
	});
});